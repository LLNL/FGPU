This code is designed to test GPU-direct functionality with Fortran/OpenMP 4.5.

There are several use cases that arise from normal use, many of which are centered around derived types.

The cases that this code is designed to test are listed below, which are passed into the function on the command line

Function argument specifies the MPI case to run:
1: Allocating temporary arrays that are passed through MPI call, using only CPU 
2: Allocating temporary arrays that are passed through MPI call, using GPU-direct (currently how Miranda works)
3: Using scratch space that is allocated before hand as part of derived type, CPU only
4: Using scratch space that is allocated before hand as part of derived type, using GPU-direct (DOES NOT WORK, 9/5/2019)
5: Passing a pointer through the MPI call that references the scratch array inside a derived type; CPU only
6: Passing a pointer through the MPI call that references the scratch array inside a derived type; using GPU-direct (Works but severely impacts performance)
7: Sending a subsection of an array through an MPI call, CPU only.
8: Sending a subsection of an allocatated array through an MPI call using GPU-direct (DOES NOT WORK, 9/5/2019)

In order to use the GPU-direct capabilities, the additional flags -M "-gpu" must be given to lrun or the program will segfault

Example usage:

lrun -n 4 -M "-gpu" ./gpudirect 1

-- Brandon Blakeley
blakeley1@llnl.gov
