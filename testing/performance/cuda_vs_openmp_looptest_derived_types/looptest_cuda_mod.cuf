module looptest_cuda_mod

contains
subroutine looptest_cuda()
   use cudafor

   type, public :: SampleType
      integer(kind=cuda_stream_kind) :: stream

      real, allocatable, device :: weight(:)
      real, allocatable, device :: phi(:,:)
      real, allocatable, device :: psi(:,:,:)

   end type SampleType

   implicit none

   integer :: a, c, g
   integer :: numa, numc, numg
	integer :: istat

   real, pinned, allocatable :: weight(:)
   real, pinned, allocatable :: phi(:,:)
   real, pinned, allocatable :: psi(:,:,:)

   type(SampleType) :: a_type

   call __xlcuf_init()

	istat = cudaStreamCreate(a_type%stream)

	istat = cudaforSetDefaultStream(a_type%weight, a_type%stream)
	istat = cudaforSetDefaultStream(a_type%phi, a_type%stream)
	istat = cudaforSetDefaultStream(a_type%psi, a_type%stream)
!	istat = cudaforSetDefaultStream(a_type%stream)
	
   numa = 64
   numc = 16000
   numg = 128

   allocate(weight(numa))
   allocate(phi(numg,numc))
   allocate(psi(numg,numc,numa))

   allocate(a_type%weight(numa))
   allocate(a_type%phi(numg,numc))
   allocate(a_type%psi(numg,numc,numa))

   a_type%psi = psi
   a_type%phi = phi
   a_type%weight = weight

   call looptest_cuda_kernel<<<numc, numg, 0, a_type%stream>>>( numc, numg, numa, a_type%psi, a_type%phi, a_type%weight )

   phi = a_type%phi

	print *,"Ran cuda kernel."

   return
   end subroutine looptest_cuda

attributes(global) subroutine looptest_cuda_kernel(numc, numg, numa, psi, phi, weight)

   use cudafor

   implicit none

!  Arguments
   integer, value, intent(in):: numc, numg, numa
   real, intent(in), device :: psi(numg, numc, numa )
   real, device :: phi(numg, numc)
   real, intent(in), device :: weight(numa)

!  Local

   integer :: c, g, a

   c = blockIdx.x
   g = threadIdx.x

   phi(g,c) = 0.0

   do a=1,numa
     phi(g, c) = phi(g, c) + (weight(a) * psi(g,c,a))
   end do

   return
   end subroutine looptest_cuda_kernel

end module looptest_cuda_mod
