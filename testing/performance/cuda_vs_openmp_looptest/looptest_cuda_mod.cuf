module looptest_cuda_mod
contains

subroutine looptest_cuda()
   use cudafor

   implicit none

	integer(kind=cuda_stream_kind) :: stream

   integer :: a, c, g, istat
   integer :: numa, numc, numg
   real, allocatable, pinned :: weight(:)
   real, allocatable, pinned :: phi(:,:)
   real, allocatable, pinned :: psi(:,:,:)

   real, allocatable, device :: weight_d(:)
   real, allocatable, device :: phi_d(:,:)
   real, allocatable, device :: psi_d(:,:,:)

	istat = cudaStreamCreate(stream)
	istat = cudaforSetDefaultStream(stream)

   numa = 64
   numc = 16000
   numg = 128

   allocate(weight(numa))
   allocate(phi(numg,numc))
   allocate(psi(numg,numc,numa))

   allocate(weight_d(numa))
   allocate(phi_d(numg,numc))
   allocate(psi_d(numg,numc,numa))

   weight(:) = 1.0
   phi(:,:) = 2.0
   psi(:,:,:) = 3.0


   psi_d = psi
   phi_d = phi
   weight_d = weight

   call looptest_cuda_kernel<<<numc, numg>>>( numc, numg, numa, psi_d, phi_d, weight_d )

	print *,"Called cuda kernel test."

   phi = phi_d

   return
   end subroutine looptest_cuda

attributes(global) subroutine looptest_cuda_kernel(numc, numg, numa, psi_d, phi_d, weight_d)

   use cudafor

   implicit none

!  Arguments
   integer, value, intent(in):: numc, numg, numa
   real, intent(in), device :: psi_d(numg, numc, numa )
   real, device :: phi_d(numg, numc)
   real, intent(in), device :: weight_d(numa)

!  Local

   integer :: c, g, a

   c = blockIdx.x
   g = threadIdx.x

   phi_d(g,c) = 0.0

   do a=1,numa
     phi_d(g, c) = phi_d(g, c) + (weight_d(a) * psi_d(g,c,a))
   end do

   return
   end subroutine looptest_cuda_kernel

end module looptest_cuda_mod
